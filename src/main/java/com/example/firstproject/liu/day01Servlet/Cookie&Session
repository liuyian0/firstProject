会话跟踪技术
客户端会话跟踪技术  Cookie
服务端会话跟踪技术  Session

存储在客户端的数据容易被窃取和截获，存在很多不安全的因素

Cookie
工作流程：
1.服务端提供了两个Servlet（A、B）
2.浏览器发送HTTP请求1给服务端，ServletA接收到请求进行业务处理
3.A在处理过程中创建一个Cookie对象并将数据存入Cookie，A在响应数据时会将Cookie对象响应给浏览器
4.浏览器接收到响应数据时，会将Cookie中的数据存储到浏览器内存中，此时浏览器和服务端就建立了一次会话
5.在同一次会话中浏览器再次发送HTTP请求2给服务端ServletB，浏览器会携带Cookie对象中的所有数据
6.ServletB接收到请求和数据后，就可以获取到存储在Cookie对象中的数据，这样同一个会话中的多次请求之间就实现了数据共享

步骤：
1.创建maven项目，在pom.xml文件中添加servlet依赖
2.编写AServlet
3.在AServlet中创建Cookie对象，存入数据，发送给前端
4.启动测试，在浏览器中查看Cookie的值

开发者模式下Application下可以看到Cookie的数据

Cookie的存活时间
会话级别的Cookie：会话结束（浏览器关闭），Cookie消失
持久化级别的Cookie：会话结束，Cookie保存，下次访问时Cookie仍然存在

Cookie持久化操作AB
设置Cookie存活时间setMaxAge(int secconds);
参数：
正数：将Cookie写入浏览器所在的电脑硬盘，持久化存储，到时间自动销毁
负数：默认值，Cookie在当前浏览器的内存中，浏览器关闭，Cookie删除
0：删除当前Cookie

Cookie中存储特殊字符CServlet
先编码再存储

Session
工作流程：
1.在服务端的DServlet获取一个Session对象，把数据存入其中
2.在服务端的EServlet获取到相同的Session对象，从中取出数据

Session持久化方案步骤
1.创建Session对象
2.获取Session的JSESSIOID的值
3.创建Cookie，Cookie（"JSESSIOID",值）
4.使用cookie对象调用方法setMaxAge()进行cookie的持久化
5.将cookie响应给浏览器

Session的钝化和活化
钝化：正常关闭Tomcat服务器，会将Session容器中的数据长久保存到硬盘上。底层原理是序列化；
活化：启动Tomcat服务器，将之前钝化的session容器中的数据读取到内存中。底层原理是反序列化。
存储在Session容器中的对象所属类必须实现序列化接口Serializable

product、setSessionServlet、getSessionServlet打成war包，复制到tomcat的webapps目录下
启动tomcat
浏览器地址栏输入localhost:8080/war包名/setSessionServlet
关闭tomcat
会在../apache-tomcat-8.5.31\work\Catalina\localhost\firstProject-1.0-SNAPSHOT目录下生成SESSIONS.ser（即钝化文件）
再次启动tomcat，钝化文件会被加载到内存中，文件自动消失

Session销毁
1.默认无操作30分钟自动销毁
1.1失效时间可以在项目的web.xml文件中修改
<session-config>
    <session-timeout>10</session-timeout>
</session-config>
1.2项目中不配置的话，在Tomcat的pom.xml文件中配置，默认也是30分钟
2.调用Session对象的invalidate()进行销毁
